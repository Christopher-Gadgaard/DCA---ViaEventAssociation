// <auto-generated />
using System;
using System.Collections.Generic;
using EfcDmPersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EfcDmPersistence.Migrations
{
    [DbContext(typeof(ViaDbContext))]
    partial class ViaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Via.EventAssociation.Core.Domain.Aggregates.Event.ViaEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Via.EventAssociation.Core.Domain.Aggregates.Guests.ViaGuest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.ComplexProperty<Dictionary<string, object>>("ViaEmail", "Via.EventAssociation.Core.Domain.Aggregates.Guests.ViaGuest.ViaEmail#ViaEmail", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ViaGuestName", "Via.EventAssociation.Core.Domain.Aggregates.Guests.ViaGuest.ViaGuestName#ViaGuestName", b1 =>
                        {
                            b1.IsRequired();

                            b1.ComplexProperty<Dictionary<string, object>>("FirstName", "Via.EventAssociation.Core.Domain.Aggregates.Guests.ViaGuest.ViaGuestName#ViaGuestName.FirstName#ViaName", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("FirstName");
                                });

                            b1.ComplexProperty<Dictionary<string, object>>("LastName", "Via.EventAssociation.Core.Domain.Aggregates.Guests.ViaGuest.ViaGuestName#ViaGuestName.LastName#ViaName", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Value")
                                        .IsRequired()
                                        .HasColumnType("TEXT")
                                        .HasColumnName("LastName");
                                });
                        });

                    b.HasKey("Id");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("Via.EventAssociation.Core.Domain.Aggregates.Event.ViaEvent", b =>
                {
                    b.OwnsMany("Via.EventAssociation.Core.Domain.Aggregates.Event.InvitationEntity.ViaInvitation", "Invitations", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Status");

                            b1.Property<Guid>("ViaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("ViaGuestId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("ViaEventId");

                            b1.ToTable("ViaInvitation");

                            b1.WithOwner()
                                .HasForeignKey("ViaEventId");
                        });

                    b.OwnsOne("Via.EventAssociation.Core.Domain.Aggregates.Event.Values.ViaEventDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("ViaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("EventDescription");

                            b1.HasKey("ViaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("ViaEventId");
                        });

                    b.OwnsOne("Via.EventAssociation.Core.Domain.Aggregates.Event.Values.ViaEventTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("ViaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("EventTitle");

                            b1.HasKey("ViaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("ViaEventId");
                        });

                    b.OwnsOne("Via.EventAssociation.Core.Domain.Aggregates.Event.Values.ViaMaxGuests", "MaxGuests", b1 =>
                        {
                            b1.Property<Guid>("ViaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("MaxGuests");

                            b1.HasKey("ViaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("ViaEventId");
                        });

                    b.OwnsMany("Via.EventAssociation.Core.Domain.Common.Values.Ids.ViaGuestId", "Guests", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("ViaEventId")
                                .HasColumnType("TEXT");

                            b1.HasKey("Id");

                            b1.HasIndex("ViaEventId");

                            b1.ToTable("ViaGuestId");

                            b1.WithOwner()
                                .HasForeignKey("ViaEventId");
                        });

                    b.OwnsOne("Via.EventAssociation.Core.Domain.Common.Values.ViaDateTimeRange", "DateTimeRange", b1 =>
                        {
                            b1.Property<Guid>("ViaEventId")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("EndValue")
                                .HasColumnType("TEXT")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartValue")
                                .HasColumnType("TEXT")
                                .HasColumnName("StartDate");

                            b1.HasKey("ViaEventId");

                            b1.ToTable("Events");

                            b1.WithOwner()
                                .HasForeignKey("ViaEventId");
                        });

                    b.Navigation("DateTimeRange");

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Guests");

                    b.Navigation("Invitations");

                    b.Navigation("MaxGuests")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
